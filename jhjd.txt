/*
Разработать программу, сравнивающую эффек-
тивность следующих алгоритмов поиска подстроки в строке
при различных входных данных и длинах алфавита: алгоритм
быстрого поиска, алгоритм оптимального несовпадения, алго-
ритм максимального сдвига.
*/
/*
быстрый поиск - Бойера — Мура ++


алгоритм оптимального несовпадения это KMP? ++

алгоритм максимального сдвига +

*/


#include <iostream>
#include<string>
#include<chrono>
#include<ctime>
int seek_substring_KMP( const char s[],const char p[])
{
	int i, j, N, M;
	N = strlen(s);
	M = strlen(p);

	
	int* d = (int*)malloc(M * sizeof(int));


	d[0] = 0;
	for (i = 1, j = 0; i < M; i++)
	{
		while (j > 0 && p[j] != p[i])
			j = d[j - 1];
		if (p[j] == p[i])
			j++;
		d[i] = j;
	}

	// Поиск
	for (i = 0, j = 0; i < N; i++)
	{
		while (j > 0 && p[j] != s[i])
			j = d[j - 1];
		if (p[j] == s[i])
			j++;
		if (j == M)
		{
			free(d);
			return i - j + 1;
		}
	}
	free(d);
    return -1;
}



void PRE_KMP( const char* x, int m, int kmp_next[]) {
	int i, j;

	i = 0;
	j = kmp_next[0] = -1;
	while (i < m) {
		while (j > -1 && x[i] != x[j]) j = kmp_next[j];
		i++;
		j++;
		if (x[i] == x[j]) kmp_next[i] = kmp_next[j];
		else kmp_next[i] = j;
	}
}

void KMP( const char* x,const char* y, int n, int m) {
	int i, j;
	int* kmp_next = new int[strlen(x)];

	/* Preprocessing */
	PRE_KMP(x, m, kmp_next);

	/* Searching */

	i = j = 0;
	while (i < n) {
		while (j > -1 && x[j] != y[i]) j = kmp_next[j];
		i++;
		j++;
		if (j >= m) {
			j = kmp_next[j];
		}
	}
}


void Alg3(const char* x, const char* y) // максимального сдвига  +++
{
	for (int i = 0; i < strlen(x); i++)
	{
		
		for (int j = 0; j < strlen(y); j++)
		{
			if (x[i] == y[j])
			{
				bool flag = true;
				for (int z = 0; z < strlen(y)-j; z++)
				{
					if (x[i + z] != y[i + z])
					{
						flag = false;
						break;
					}
				}
				
			}
			
		}
	}
}

/*# define NO_OF_CHARS 256


int max(int a, int b)

{
    return (a > b) ? a : b;
}

void badCharHeuristic(char *str, int size, int badchar[NO_OF_CHARS])
{
    int i;
    for (i = 0; i < NO_OF_CHARS; i++)

        badchar[i] = -1;
    for (i = 0; i < size; i++)
        badchar[(int) str[i]] = i;
}

 

void search(char *txt, char *pat)

{

    int m = strlen(pat);
    int n = strlen(txt);
   // int badchar[NO_OF_CHARS];
    
    int *badchar = new int[sizeof(txt)/sizeof(char)];
    
    badCharHeuristic(pat, m, badchar);
    int s = 0; 

    while (s <= (n - m))

    {

        int j = m - 1;
        while (j >= 0 && pat[j] == txt[s + j])
        j--;


        if (j < 0)
        {
            printf("\n pattern occurs at shift = %d", s);
            s += (s + m < n) ? m - badchar[txt[s + m]] : 1;
        }
        else
            s += max(1, j - badchar[txt[s + j]]);
    }
}




*/



int main()
{ 
	srand(time(0))
        std::cout << "Select action:\n0.From keyboard\n1.Random";
 	bool c = true;
  	std::string s;
  	std::string p;
 	std::cin >> c;
	if(c)
        {
        std::cout << "Введите строку:";
	std::getline(std::cin, s);
        }
  	else
        {
          s = "";
          for(int i=0;i<1000;i++)
          {
            s += rand()%10;
          }
        }
  	std::cout << "Введите подстроку:";
	std::getline(std::cin, p);
  
  
	auto begin = std::chrono::steady_clock::now();
	seek_substring_KMP(s.c_str(),p.c_str());
	auto end = std::chrono::steady_clock::now();
	auto elapsed_ms = std::chrono::duration_cast<std::chrono::milliseconds>(end - begin);
	std::cout << "\nВремя выполнения алгоритма: " << elapsed_ms.count();


	auto begin1 = std::chrono::steady_clock::now();
	KMP(s.c_str(), p.c_str(), 0, strlen(s.c_str()));
	auto end1 = std::chrono::steady_clock::now();
	auto elapsed_ms1 = std::chrono::duration_cast<std::chrono::milliseconds>(end1 - begin1);
	std::cout << "\nВремя выполнения алгоритма: " << elapsed_ms1.count();


	auto begin2 = std::chrono::steady_clock::now();
	Alg3(s.c_str(), p.c_str());
	auto end2 = std::chrono::steady_clock::now();
	auto elapsed_ms2 = std::chrono::duration_cast<std::chrono::milliseconds>(end2 - begin2);
	std::cout << "\nВремя выполнения алгоритма: " << elapsed_ms2.count();
	return 0;
}